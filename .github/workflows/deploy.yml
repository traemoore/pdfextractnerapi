# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "develop" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "develop" ]

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GAR_LOCATION: us-central1 
  GKE_CLUSTER: insights-extractor
  GKE_ZONE: us-central1-c
  DEPLOYMENT_NAME: insights-extractor-api-worker
  REPOSITORY: insights-extractor
  API_IMAGE: ieapi
  WORKER_IMAGE: ieworker

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    # Alternative option - authentication via credentials json
    - id: get-secrets
      uses: google-github-actions/get-secretmanager-secrets@v0.3.0
      with:
        secrets: '{"name": "secret-name", "key": "service_account"}'
        credentials: ${{ secrets.GCP_K8S_STORAGE_WR }}

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.PROJECT_ID }}
        service_account_key: ${{ steps.get-secrets.outputs.service_account }}

    - name: Generate access token
      id: generate-access-token
      run: echo ::set-output name=access_token::$(gcloud auth print-access-token)


    - name: Debug auth outputs
      run: |
        echo "Access token: ${{ steps.auth.outputs.access_token }}"
        echo "Credentials file path: ${{ steps.auth.outputs.credentials_file_path }}"

# ------------------    
    # - name: Authenticate with gcloud CLI
    #   run: |-
    #   gcloud auth activate-service-account --key-file ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

    # - name: Docker configuration
    #   env:
    #     GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
    #   run: |-
    #     echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://${{ env.GAR_LOCATION }}-docker.pkg.dev
# ------------------

    - name: Docker configuration
      run: |-
        echo ${{ steps.generate-access-token.outputs.access_token }} | docker login -u oauth2accesstoken --password-stdin https://${{ env.GAR_LOCATION }}-docker.pkg.dev

    
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # Build the Docker image
    # - name: Docker Build
    #   run: |-
    #     docker build \
    #       --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$API_IMAGE:$GITHUB_SHA" \
    #       --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$API_IMAGE:latest" \
    #       --build-arg GITHUB_SHA="$GITHUB_SHA" \
    #       --build-arg GITHUB_REF="$GITHUB_REF" \
    #       -f api.dockerfile
    #       .
    #     docker build \
    #       --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$WORKER_IMAGE:$GITHUB_SHA" \
    #       --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$WORKER_IMAGE:latest" \
    #       --build-arg GITHUB_SHA="$GITHUB_SHA" \
    #       --build-arg GITHUB_REF="$GITHUB_REF" \
    #       -f worker.dockerfile \
    #       .

    # # Push the Docker image to Google Artifact Registry
    # - name: Publish
    #   run: |-
    #     docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$API_IMAGE:$GITHUB_SHA"
    #     docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$WORKER_IMAGE:$GITHUB_SHA"
    # # Set up kustomize
    # - name: Set up Kustomize
    #   run: |-
    #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
    #     chmod u+x ./kustomize
    # # Deploy the Docker image to the GKE cluster
    # - name: Deploy
    #   run: |-
    #     # replacing the image name in the k8s template
    #     ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/API_IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$API_IMAGE:$GITHUB_SHA
    #     ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/WORKER_IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$WORKER_IMAGE:$GITHUB_SHA
    #     ./kustomize build k8s/overlays/test | kubectl apply -f -
    #     kubectl rollout status deployment/$DEPLOYMENT_NAME
    #     kubectl get services -o wide
